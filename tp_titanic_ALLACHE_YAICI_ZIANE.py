# -*- coding: utf-8 -*-
"""TP_Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CjRjij8ZSSRTpZZ3Lg5g7AckXNO46Mx9
"""

import pandas as pd 
data = pd.read_csv('train.csv')

data.head()

print(data.shape)

data= data.drop(['PassengerId','Name','SibSp','Parch','Ticket','Fare','Cabin','Embarked'], axis = 1)

data['Sex'].replace(['male','female'], ['0','1'],inplace=True)
data = data.dropna(axis=0)

data.head(300)

data.describe()

x = data.drop(['Survived'],axis=1)
y = data['Survived']

print(x.shape)
print(y.shape)

from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
import time

x_train,  x_test,  y_train,  y_test  =  train_test_split(x,  y, train_size = 0.8,random_state=0) 

temps_depart = time.time()

mlp = MLPClassifier(hidden_layer_sizes=(500,200,400), activation = 'identity', solver ='lbfgs',
                                       random_state = 0).fit(x_train, y_train)

mlp.score(x_test, y_test)
pred = mlp.predict(x_test)
temps_fin= time.time()

print("Score: " +str(mlp.score(x_test, y_test)))
print(" Temps d'entraînement "+ str(temps_fin- temps_depart),"s")

from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split

x_train,  x_test,  y_train,  y_test  =  train_test_split(x,  y, train_size = 0.8
                                                        ,random_state=0) 

temps_depart = time.time()

scaler = StandardScaler()
scaler.fit(x_train)
x_train_ = scaler.transform(x_train)
x_test_ = scaler.transform(x_test)
mlp = MLPClassifier(hidden_layer_sizes=(500,200,400), activation = 'tanh', solver ='lbfgs',
                                       random_state = 0).fit(x_train_, y_train)

mlp.score(x_test_, y_test)
pred = mlp.predict(x_test_)
temps_fin= time.time()

print("Score: " +str(mlp.score(x_test_, y_test)))
print("Temps d'entraînement "+ str(temps_fin- temps_depart),"s")

from sklearn.pipeline import Pipeline

from sklearn.metrics import accuracy_score
x_train,  x_test,  y_train,  y_test  =  train_test_split(x,  y, train_size = 0.8
                                                        ,random_state=0) 

temps_depart = time.time()

MLP = Pipeline([('scaler', MinMaxScaler()),('mlp', MLPClassifier( activation = 'identity',
      solver = 'adam',hidden_layer_sizes=(500,200,400), random_state=0))]).fit(x_train, y_train)
temps_fin= time.time()

ypred = MLP.predict(x_test)
score = accuracy_score(y_test, ypred)

print(f"score {score}")
print(f"Temps d'entraînement = {temps_fin- temps_depart}s")

x_train,  x_test,  y_train,  y_test  =  train_test_split(x,  y, train_size = 0.8
                                                        ,random_state=0) 

temps_depart = time.time()
mlp = MLPClassifier(hidden_layer_sizes=(300,100), activation = 'relu', solver ='lbfgs',
                                       random_state = 0).fit(x_train, y_train)

mlp.score(x_test, y_test)
pred = mlp.predict(x_test)
temps_fin= time.time()

print("Score: " +str(mlp.score(x_test, y_test)))
print(" Temps d'entraînement "+ str(temps_fin- temps_depart),"s")

from sklearn.model_selection import GridSearchCV
param = {'activation':('relu','identity','tanh','logistic'), 'solver':('lbfgs','adam', 'sgd'), 'hidden_layer_sizes': [(500,200,400)]}
temps_depart = time.time()
grid = GridSearchCV(MLPClassifier(random_state=0), param, cv=5)
grid.fit(x_train, y_train)

grid.score(x_test, y_test)
pred = grid.predict(x_test)
temps_fin= time.time()

print(grid.best_params_)

temps_depart = time.time()
mlp = MLPClassifier(hidden_layer_sizes=(300), activation = 'tanh', solver ='lbfgs',
                                       random_state = 0).fit(x_train, y_train)

mlp.score(x_test, y_test)
pred = mlp.predict(x_test)
temps_fin= time.time()

print("Score: " +str(mlp.score(x_test, y_test)))

from time import time
for i in range (1,1000,100): 
  temps_depart = time()
  mlp = MLPClassifier(hidden_layer_sizes=(i), activation = 'relu', solver ='adam'
                                        , random_state = 0).fit(x_train, y_train)

  mlp.score(x_test, y_test)
  pred = mlp.predict(x_test)
  temps_fin= time()

  print(i)
  print("Score: " +str(mlp.score(x_test, y_test)))
  print(" Temps d'entraînement "+ str(temps_fin- temps_depart),"s")

d = pd.read_csv('test.csv')
d.head()

#Partie de tensorflow



from tensorflow.keras.layers import Input, Dense,Flatten
from tensorflow.keras.models import Sequential
import numpy as np
from sklearn.model_selection import train_test_split

x_train,  x_test,  y_train,  y_test  =  train_test_split(x,  y
                                                        ,random_state=0) 

print(x_train.shape,y_test.shape)
model = Sequential()
 
model.add(Input(shape=(3,)))
model.add(Flatten())
model.add(Dense(500))
model.add(Dense(400))
model.add(Dense(300))
model.add(Dense(200))
model.add(Dense(1,activation="sigmoid"))

x = data.drop(['Survived'],axis=1)
y = data['Survived']

import numpy as np

x = np.asarray(x).astype(np.float32)

model.summary()

model.compile(optimizer='adam',metrics= ['accuracy']  ,loss='BinaryCrossentropy')

model.fit(x_train, y_train, epochs =10, validation_data=(x_test,y_test), batch_size=10, verbose=1)

